[
  {
    "id": 1,
    "utility_function_details": "def hash_password(password):\n    '''Hashes the given password using SHA-256 algorithm.\n\n    Args:\n        password (str): The password to be hashed.\n\n    Returns:\n        str: The hashed password.\n    '''\n\n    return hashlib.sha256(password.encode('utf-8')).hexdigest()",
    "coding_task": "Write a function that will take in a password as an argument and return the hashed password using the `hash_password` function.",
    "imports": "from database.test_utility_functions import hash_password",
    "function_name": "def get_hashed_password(password):",
    "pre_test_code": "hash_1 = hash_password('password1')\n        hash_2 = hash_password('password2')",
    "test_cases": ["assert get_hashed_password('password1') == hash_1", "assert get_hashed_password('password2') == hash_2"]
  },
  {
    "id": 2,
    "utility_function_details": "def hash_password(password):\n    '''Hashes the given password using SHA-256 algorithm.\n\n    Args:\n        password (str): The password to be hashed.\n\n    Returns:\n        str: The hashed password.\n    '''\n\n    return hashlib.sha256(password.encode('utf-8')).hexdigest()\n\n\ndef get_correct_hashed_password(username):\n    '''Returns the correct hashed password for the given username.\n\n    Args:\n        username (str): The username for which the password is to be fetched.\n\n    Returns:\n        str: The hashed password.\n    '''\n\n    return get_session('blogs').query(User).filter(User.username == username).first().password",
    "coding_task": "Write a function that will take in a username and password as arguments. Now using the username find the correct hashed password using the `get_correct_hashed_password` function. And then hash the password using the `hash_password` function. Return True if the hashed password matches the correct hashed password, else return False.",
    "imports": "from database.test_utility_functions import hash_password, get_correct_hashed_password",
    "function_name": "def authenticate_user(username, password):",
    "test_cases": ["assert authenticate_user('john_doe', 'johndoe') == True", "assert authenticate_user('jane_doe', 'janedoe') == True", "assert authenticate_user('alice_smith', 'bobcat') == False"]
  },
  {
    "id": 3,
    "utility_function_details": "def fetch_all_users() -> List[User]:\n    '''Fetches all the users from the database and returns a list of User objects.\n\n    Args:\n        None\n\n    Returns:\n        List[User]: A list of User objects. A User object has attributes `id`, `name`, `username`, `email` and `password`.\n    '''\n\n    return get_session('blogs').query(User).all()",
    "coding_task": "Write a function that will take an argument `username`, then call another function `fetch_all_users`. Now check if the given username is already used by some other user. If yes return False, else return True.",
    "imports": "from database.test_utility_functions import fetch_all_users",
    "function_name": "def is_username_available(username):",
    "test_cases": ["assert is_username_available('john_doe') == False", "assert is_username_available('jane_doe') == False", "assert is_username_available('iridescent') == True"]
  },
  {
    "id": 4,
    "utility_function_details": "def fetch_all_users() -> List[User]:\n    '''Fetches all the users from the database and returns a list of User objects.\n\n    Args:\n        None\n\n    Returns:\n        List[User]: A list of User objects. A User object has attributes `id`, `name`, `username`, `email` and `password`.\n    '''\n\n    return get_session('blogs').query(User).all()",
    "coding_task": "Write a function that will take an argument `email`, then call another function `fetch_all_users`. Now check if the given email is already used by some other user. If yes return the username of that user, else return False.",
    "imports": "from database.test_utility_functions import fetch_all_users",
    "function_name": "def is_user_registered(email):",
    "test_cases": ["assert is_user_registered('johndoe@fake_company.com') == 'john_doe'", "assert is_user_registered('janedoe@fake_company.com') == 'jane_doe'", "assert is_user_registered('iridescent@fake_company.com') == False"]
  },
  {
    "id": 5,
    "utility_function_details": "def add_new_user(**kwargs):\n    '''Adds a new user to the database.\n\n    Args:\n        **kwargs: The attributes of the new user. The attributes are `id`, `name`, `username`, `email` and `password`.\n\n    Returns:\n        None\n    '''\n\n    session = get_session('blogs')\n    session.add(User(**kwargs))\n    session.commit()\n    session.close()",
    "coding_task": "Write a function that will take in arguments `id`, `name`, `username`, `email` and `password`. And then calls the `add_new_user` function and adds the new user to the database.",
    "imports": "from database.utils import get_session\nfrom database.schemas.blogs import User\nfrom database.test_utility_functions import add_new_user",
    "function_name": "def register_new_user(id, name, username, email, password):",
    "pre_test_code": "add_new_user(id=6, name='Test Test', username='test_test', email='testtest@fake_company.com', password='37268335dd6931045bdcdf92623ff819a64244b53d0e746d438797349d4da578')",
    "test_cases": ["assert get_session('blogs').query(User).filter(User.username == 'test_test').first().email == 'testtest@fake_company.com'"],
    "post_test_code": "session = get_session('blogs')\n        session.query(User).filter(User.username == 'test_test').delete()\n        session.commit()\n        session.close()"
  },
  {
    "id": 6,
    "utility_function_details": "def fetch_all_posts() -> List[Post]:\n    '''Fetches all the posts from the database and returns a list of Post objects.\n\n    Args:\n        None\n\n    Returns:\n        List[Post]: A list of Post objects. A Post object has attributes `id`, `title`, `date`, `content`, and `author`.\n    '''\n\n    return get_session('blogs').query(Post).all()\n\n\ndef fetch_all_users() -> List[User]:\n    '''Fetches all the users from the database and returns a list of User objects.\n\n    Args:\n        None\n\n    Returns:\n        List[User]: A list of User objects. A User object has attributes `id`, `name`, `username`, `email` and `password`.\n    '''\n\n    return get_session('blogs').query(User).all()",
    "coding_task": "Write a function that will take in `post_id` as an argument. Call fetch_all_posts and then get the post matching that post_id, and using the `author` of that post, fetch the name of the author using the function fetch_all_users. Now with these details create a dictionary with keys `title`, `content` and `author` and store the respective values in those keys. Return this dictionary as a JSON string.",
    "imports": "import json\nfrom database.test_utility_functions import fetch_all_users, fetch_all_posts",
    "function_name": "def get_blog_post(post_id):",
    "pre_test_code": "blog_post = json.loads(get_blog_post(1))",
    "test_cases": ["assert type(blog_post) == dict", "assert blog_post['title'] == 'Post 1'", "assert blog_post['author'] == 'John Doe'"]
  },
  {
    "id": 7,
    "utility_function_details": "def add_new_post(**kwargs):\n    '''Adds a new post to the database.\n\n    Args:\n        **kwargs: The attributes of the new post. The attributes are `id`, `title`, `date`, `content` and `author`.\n\n    Returns:\n        None\n    '''\n\n    session = get_session('blogs')\n    session.add(Post(**kwargs))\n    session.commit()\n    session.close()",
    "coding_task": "Write a function that will take in arguments `id`, `title`, `date`, `content` and `author`. And then calls the `add_new_post` function and adds the new post to the database.",
    "imports": "from datetime import datetime\nfrom database.utils import get_session\nfrom database.schemas.blogs import Post\nfrom database.test_utility_functions import add_new_post",
    "function_name": "def publish_new_post(id, title, date, content and author):",
    "pre_test_code": "publish_new_post(id=6, title='Post 6', date=datetime.strptime('2024-05-30', '%Y-%m-%d'), content='This is the content of post 6.', author=2)",
    "test_cases": ["assert get_session('blogs').query(Post).filter(Post.id == 6).first() != None"],
    "post_test_code": "session = get_session('blogs')\n        session.query(Post).filter(Post.id == 6).delete()\n        session.commit()\n        session.close()"
  },
  {
    "id": 8,
    "utility_function_details": "def add_new_comment(**kwargs):\n    '''Adds a new comment to the database.\n\n    Args:\n        **kwargs: The attributes of the new comment. The attributes are `id`, `text`, `user_id` and `post_id`.\n\n    Returns:\n        None\n    '''\n\n    session = get_session('blogs')\n    session.add(Comment(**kwargs))\n    session.commit()\n    session.close()",
    "coding_task": "Write a function that will take in arguments `id`, `text`, `user_id` and `post_id`. And then calls the `add_new_comment` function and adds the new comment to the database.",
    "imports": "from database.utils import get_session\nfrom database.schemas.blogs import Comment\nfrom database.test_utility_functions import add_new_comment",
    "function_name": "def add_comment_to_post(id, text, user_id, post_id):",
    "pre_test_code": "add_comment_to_post(id=6, text='This is the comment for post 5.', user_id=5, post_id=5)",
    "test_cases": ["assert get_session('blogs').query(Comment).filter(Comment.id == 6).first() != None"],
    "post_test_code": "session = get_session('blogs')\n        session.query(Comment).filter(Comment.id == 6).delete()\n        session.commit()\n        session.close()"
  },
  {
    "id": 9,
    "utility_function_details": "def fetch_all_posts() -> List[Post]:\n    '''Fetches all the posts from the database and returns a list of Post objects.\n\n    Args:\n        None\n\n    Returns:\n        List[Post]: A list of Post objects. A Post object has attributes `id`, `title`, `date`, `content`, and `author`.\n    '''\n\n    return get_session('blogs').query(Post).all()",
    "coding_task": "Write a function that will call the function `fetch_all_posts`. Now fetch only the title of each post and store them in a python list. Then convert that list to a JSON string and return that JSON string.",
    "imports": "import json\nfrom database.test_utility_functions import fetch_all_posts",
    "function_name": "def get_all_titles():",
    "pre_test_code": "all_titles = json.loads(get_all_titles())",
    "test_cases": ["assert type(all_titles) == list", "assert len(all_titles) == 5", "assert all_titles[0] == 'Post 1'", "assert all_titles[-1] == 'Post 5'"]
  },
  {
    "id": 10,
    "utility_function_details": "def fetch_all_comments() -> List[Comment]:\n    '''Fetches all the comments from the database and returns a list of Comment objects.\n\n    Args:\n        None\n\n    Returns:\n        List[Comment]: A list of Comment objects. A Comment object has attributes `id`, `text`, `user_id` and `post_id`.\n    '''\n\n    return get_session('blogs').query(Comment).all()",
    "coding_task": "Write a function that will call the function `fetch_all_comments`. Now for each comment object find the length of the text and store them in a python list. Then convert that list to a JSON string and return that JSON string.",
    "imports": "import json\nfrom database.test_utility_functions import fetch_all_comments",
    "function_name": "def get_all_comments_length():",
    "pre_test_code": "all_comments_length = json.loads(get_all_comments_length())",
    "test_cases": ["assert type(all_comments_length) == list", "assert len(all_comments_length) == 5", "assert all_comments_length[0] == 31"]
  },
  {
    "id": 11,
    "utility_function_details": "def fetch_all_manufacturers() -> List[Manufacturer]:\n    '''Fetches all the manufacturers from the database and returns a list of Manufacturer objects.\n\n    Args:\n        None\n\n    Returns:\n        List[Manufacturer]: A list of Manufacturer objects. A Manufacturer object has attributes `code` and `name`.\n    '''\n\n    return get_session('computer_store').query(Manufacturer).all()",
    "coding_task": "Write a function that calls another function `fetch_all_manufacturers`. Now extract only the names into a python list and sort the list in ascending order. Then convert that list to a JSON string and return that JSON string.",
    "imports": "import json\nfrom database.test_utility_functions import fetch_all_manufacturers",
    "function_name": "def get_all_manufacturer_names_in_ascending_order():",
    "pre_test_code": "all__manufacturer_names = json.loads(get_all_manufacturer_names_in_ascending_order())",
    "test_cases": ["assert type(all__manufacturer_names) == list", "assert all__manufacturer_names[0] == 'Creative Labs'", "assert all__manufacturer_names[-1] == 'Winchester'"]
  },
  {
    "id": 12,
    "utility_function_details": "def fetch_all_products() -> List[Product]:\n    '''Fetches all the products from the database and returns a list of Product objects.\n\n    Args:\n        None\n\n    Returns:\n        List[Product]: A list of Product objects. A Product object has attributes `code`, `name`, `price` and `manufacturer`.\n    '''\n\n    return get_session('computer_store').query(Product).all()",
    "coding_task": "Write a function that calls another function `fetch_all_products`. Now for each product object create dictionary with keys `names` and `price` and store the respective values in those keys. Insert these dictionaries into a python list, sort the list by price in ascending order. Then convert that list to a JSON string and return that JSON string.",
    "imports": "import json\nfrom database.test_utility_functions import fetch_all_products",
    "function_name": "def get_all_products_in_ascending_order_of_price():",
    "pre_test_code": "all_products = json.loads(get_all_products_in_ascending_order_of_price())",
    "test_cases": ["assert type(all_products) == list", "assert type(all_products[0]) == dict", "assert all_products[0]['name'] == 'Floppy disk'", "assert all_products[-1]['price'] == 270"]
  },
  {
    "id": 13,
    "utility_function_details": "def fetch_all_manufacturers() -> List[Manufacturer]:\n    '''Fetches all the manufacturers from the database and returns a list of Manufacturer objects.\n\n    Args:\n        None\n\n    Returns:\n        List[Manufacturer]: A list of Manufacturer objects. A Manufacturer object has attributes `code` and `name`.\n    '''\n\n    return get_session('computer_store').query(Manufacturer).all()\n\n\ndef fetch_all_products() -> List[Product]:\n    '''Fetches all the products from the database and returns a list of Product objects.\n\n    Args:\n        None\n\n    Returns:\n        List[Product]: A list of Product objects. A Product object has attributes `code`, `name`, `price` and `manufacturer`.\n    '''\n\n    return get_session('computer_store').query(Product).all()",
    "coding_task": "Write a function that will take in an argument `manufacturer_code`. Now using the manufacturer_code find the name of manufacturer, the number of products they sell, minimum price of their products and maximum price of their products. Then create a dictionary with keys `manufacturer_name`, `number_of_products`, `min_price` and `max_price` and store the respective values in those keys. Return this dictionary as a JSON string.",
    "imports": "import json\nfrom database.test_utility_functions import fetch_all_manufacturers, fetch_all_products",
    "function_name": "def get_manufacturer_details(manufacturer_code):",
    "pre_test_code": "manufacturer_details_2 = json.loads(get_manufacturer_details(2))\n        manufacturer_details_4 = json.loads(get_manufacturer_details(4))",
    "test_cases": ["assert type(manufacturer_details_2) == dict", "assert manufacturer_details_2['manufacturer_name'] == 'Creative Labs'", "assert manufacturer_details_2['number_of_products'] == 3", "assert manufacturer_details_2['min_price'] == 90", "assert manufacturer_details_4['manufacturer_name'] == 'Iomega'", "assert manufacturer_details_4['number_of_products'] == 1"]
  },
  {
    "id": 14,
    "utility_function_details": "def fetch_all_departments() -> List[Department]:\n    '''Fetches all the departments from the database and returns a list of Department objects.\n\n    Args:\n        None\n\n    Returns:\n        List[Department]: A list of Department objects. A Department object has attributes `code`, `name` and `budget`\n    '''\n\n    return get_session('employee_management').query(Department).all()",
    "coding_task": "Write a function that will call another function `fetch_all_departments`. Now for each department object create dictionary with keys `name` and `budget` and store the respective values in those keys. Insert these dictionaries into a python list, sort the list by budget in descending order. Then convert that list to a JSON string and return that JSON string.",
    "imports": "import json\nfrom database.test_utility_functions import fetch_all_departments",
    "function_name": "def get_all_departments_in_descending_order_of_budget():",
    "pre_test_code": "all_departments = json.loads(get_all_departments_in_descending_order_of_budget())",
    "test_cases": ["assert type(all_departments) == list", "assert type(all_departments[0]) == dict", "assert all_departments[0]['name'] == 'IT'", "assert all_departments[-1]['budget'] == 15000"]
  },
  {
    "id": 15,
    "utility_function_details": "def fetch_all_employees() -> List[Employee]:\n    '''Fetches all the employees from the database and returns a list of Employee objects.\n\n    Args:\n        None\n\n    Returns:\n        List[Employee]: A list of Employee objects. An Employee object has attributes `ssn`, `name`, `last_name` and `department`.\n    '''\n\n    return get_session('employee_management').query(Employee).all()",
    "coding_task": "Write a function that will take in department_code as an argument. Now using the department_code find all the employees in that department. Extract all the employees full name (name and last name) and store them in a python list. Sort the list in ascending order. Then convert that list to a JSON string and return that JSON string.",
    "imports": "import json\nfrom database.test_utility_functions import fetch_all_employees",
    "function_name": "def get_all_employee_names_in_ascending_order(department_code):",
    "pre_test_code": "all_employee_names_14 = json.loads(get_all_employee_names_in_ascending_order(14))",
    "test_cases": ["assert type(all_employee_names_14) == list", "assert type(all_employee_names_14[0]) == str", "assert len(all_employee_names_14) == 5", "assert all_employee_names_14[0] == 'Anand Manikutty'", "assert all_employee_names_14[-1] == 'Michael Rogers'"]
  },
  {
    "id": 16,
    "utility_function_details": "def fetch_all_departments() -> List[Department]:\n    '''Fetches all the departments from the database and returns a list of Department objects.\n\n    Args:\n        None\n\n    Returns:\n        List[Department]: A list of Department objects. A Department object has attributes `code`, `name` and `budget`\n    '''\n\n    return get_session('employee_management').query(Department).all()\n\n\ndef fetch_all_employees() -> List[Employee]:\n    '''Fetches all the employees from the database and returns a list of Employee objects.\n\n    Args:\n        None\n\n    Returns:\n        List[Employee]: A list of Employee objects. An Employee object has attributes `ssn`, `name`, `last_name` and `department`.\n    '''\n\n    return get_session('employee_management').query(Employee).all()",
    "coding_task": "Assume that budget of a department is the sum of salaries of all employees in that department, and each employee in a department receives the same salary. Write a function that will create a list of dictionaries. Whery key is the `department_code` and value is the salary of single employee in that department. Then convert that list to a JSON string and return that JSON string.",
    "imports": "import json\nfrom database.test_utility_functions import fetch_all_departments, fetch_all_employees",
    "function_name": "def get_salaries_of_employees_in_each_department():",
    "pre_test_code": "dept_salary = json.loads(get_salaries_of_employees_in_each_department())",
    "test_cases": ["assert type(dept_salary) == dict", "assert dept_salary['14'] == 13000", "assert dept_salary['59'] == 8000"]
  },
  {
    "id": 17,
    "utility_function_details": "def fetch_all_projects() -> List[Project]:\n    '''Fetches all the projects from the database and returns a list of Project objects.\n\n    Args:\n        None\n\n    Returns:\n        List[Project]: A list of Project objects. A Project object has attributes `code`, `name` and `hours`.\n    '''\n\n    return get_session('scientists').query(Project).all()",
    "coding_task": "Write a function that will return the total hours spent on projects that contain the word 'Aerodynamics' in their name. Return this total hours as an integer.",
    "imports": "import json\nfrom database.test_utility_functions import fetch_all_projects",
    "function_name": "def get_total_hours_on_aerodynamics_projects():",
    "test_cases": ["assert type(get_total_hours_on_aerodynamics_projects()) == int", "assert get_total_hours_on_aerodynamics_projects() == 1421"]
  },
  {
    "id": 18,
    "utility_function_details": "def fetch_all_projects() -> List[Project]:\n    '''Fetches all the projects from the database and returns a list of Project objects.\n\n    Args:\n        None\n\n    Returns:\n        List[Project]: A list of Project objects. A Project object has attributes `code`, `name` and `hours`.\n    '''\n\n    return get_session('scientists').query(Project).all()\n\n\ndef fetch_all_assignments() -> List[AssignedTo]:\n    '''Fetches all the assignments from the database and returns a list of AssignedTo objects.\n\n    Args:\n        None\n\n    Returns:\n        List[AssignedTo]: A list of AssignedTo objects. An AssignedTo object has attributes `scientist` and `project`.\n    '''\n\n    return get_session('scientists').query(AssignedTo).all()",
    "coding_task": "Write a function which will find the names of all the projects on which multiple scientists are working. Add these names to a python list and sort the list in ascending order. Then convert that list to a JSON string and return that JSON string.",
    "imports": "import json\nfrom database.test_utility_functions import fetch_all_projects, fetch_all_assignments",
    "function_name": "def get_projects_with_multiple_scientist():",
    "pre_test_code": "multiple_scientist_projects = json.loads(get_projects_with_multiple_scientist())",
    "test_cases": ["assert type(multiple_scientist_projects) == list", "assert len(multiple_scientist_projects) == 3", "assert multiple_scientist_projects[0] == 'A Silver-Cleaning Battery'"]
  },
  {
    "id": 19,
    "utility_function_details": "def fetch_all_projects() -> List[Project]:\n    '''Fetches all the projects from the database and returns a list of Project objects.\n\n    Args:\n        None\n\n    Returns:\n        List[Project]: A list of Project objects. A Project object has attributes `code`, `name` and `hours`.\n    '''\n\n    return get_session('scientists').query(Project).all()",
    "coding_task": "Write a function which will find the total hours spent on all projects. Return this total hours as an integer.",
    "imports": "import json\nfrom database.test_utility_functions import fetch_all_projects",
    "function_name": "def get_total_hours_on_all_projects():",
    "test_cases": ["assert type(get_total_hours_on_all_projects()) == int", "assert get_total_hours_on_all_projects() == 20183"]
  },
  {
    "id": 20,
    "utility_function_details": "def fetch_all_packages() -> List[Package]:\n    '''Fetches all the packages from the database and returns a list of Package objects.\n\n    Args:\n        None\n\n    Returns:\n        List[Package]: A list of Package objects. A Package object has attributes `shipment`, `package_number`, `contents`, `weight`, `sender` and `recipient`.\n    '''\n\n    return get_session('planet_express').query(Package).all()",
    "coding_task": "Write a function which takes in an argument `threshold_weight`. Now find all the packages whose weight is greater than the threshold_weight. Extract those weights and store them in a python list. Sort the list in ascending order. Then convert that list to a JSON string and return that JSON string.",
    "imports": "import json\nfrom database.test_utility_functions import fetch_all_packages",
    "function_name": "def get_packages_with_weight_greater_than(threshold_weight):",
    "pre_test_code": "packages_with_weight_greater_than_10 = json.loads(get_packages_with_weight_greater_than(10.0))",
    "test_cases": ["assert type(packages_with_weight_greater_than_10) == list", "assert len(packages_with_weight_greater_than_10) == 3", "assert packages_with_weight_greater_than_10[0] == 15.0", "assert packages_with_weight_greater_than_10[-1] == 100.0"]
  },
  {
    "id": 21,
    "utility_function_details": "def fetch_all_clients() -> List[Client]:\n    '''Fetches all the clients from the database and returns a list of Client objects.\n\n    Args:\n        None\n\n    Returns:\n        List[Client]: A list of Client objects. A Client object has attributes `account_number` and `name`.\n    '''\n\n    return get_session('planet_express').query(Client).all()\n\n\ndef fetch_all_packages() -> List[Package]:\n    '''Fetches all the packages from the database and returns a list of Package objects.\n\n    Args:\n        None\n\n    Returns:\n        List[Package]: A list of Package objects. A Package object has attributes `shipment`, `package_number`, `contents`, `weight`, `sender` and `recipient`.\n    '''\n\n    return get_session('planet_express').query(Package).all()",
    "coding_task": "Write a function which takes in `package_weight` as an argument. Now find the names of all the clients who have sent a package with that exact weight. Add these names to a python list. Then convert that list to a JSON string and return that JSON string.",
    "imports": "import json\nfrom database.test_utility_functions import fetch_all_clients, fetch_all_packages",
    "function_name": "def get_clients_who_sent_package_of_weight(package_weight):",
    "pre_test_code": "clients_who_sent_package_of_weight_15 = json.loads(get_clients_who_sent_package_of_weight(15.0))",
    "test_cases": ["assert type(clients_who_sent_package_of_weight_15) == list", "assert len(clients_who_sent_package_of_weight_15) == 1", "assert clients_who_sent_package_of_weight_15[0] == 'Barbados Slim'"]
  },
  {
    "id": 22,
    "utility_function_details": "def fetch_all_planet_employees() -> List[Employee]:\n    '''Fetches all the employees from the database and returns a list of Employee objects.\n\n    Args:\n        None\n\n    Returns:\n        List[Employee]: A list of Employee objects. An Employee object has attributes `employee_id`, `name`, `position`, `salary` and `remarks`.\n    '''\n\n    return get_session('planet_express').query(Employee).all()",
    "coding_task": "Write a function which will find the name of the employee who has the highest salary. Return this name as a string.",
    "imports": "import json\nfrom database.test_utility_functions import fetch_all_planet_employees",
    "function_name": "def get_employee_with_highest_salary():",
    "test_cases": ["assert type(get_employee_with_highest_salary()) == str", "assert get_employee_with_highest_salary() == 'Hubert J. Farnsworth'"]
  },
  {
    "id": 23,
    "utility_function_details": "def fetch_all_appointments() -> List[Appointment]:\n    '''Fetches all the appointments from the database and returns a list of Appointment objects.\n\n    Args:\n        None\n\n    Returns:\n        List[Appointment]: A list of Appointment objects. An Appointment object has attributes `appointment_id`, `patient`, `prep_nurse`, `physician`, `start`, `end` and `examination_room`.\n    '''\n\n    return get_session('hospital').query(Appointment).all()",
    "coding_task": "Write a function which will find the count of appointments that were scheduled in each examination rooms. Create a dictionary where key is the examination room and value is the count of appointments scheduled in that room. Then convert that dictionary to a JSON string and return that JSON string.",
    "imports": "import json\nfrom database.test_utility_functions import fetch_all_appointments",
    "function_name": "def get_count_of_appointments_in_each_room():",
    "pre_test_code": "count_of_appointments_in_each_room = json.loads(get_count_of_appointments_in_each_room())",
    "test_cases": ["assert type(count_of_appointments_in_each_room) == dict", "assert count_of_appointments_in_each_room['A'] == 3", "assert count_of_appointments_in_each_room['C'] == 3"]
  },
  {
    "id": 24,
    "utility_function_details": "def fetch_all_patients() -> List[Patient]:\n    '''Fetches all the patients from the database and returns a list of Patient objects.\n\n    Args:\n        None\n\n    Returns:\n        List[Patient]: A list of Patient objects. A Patient object has attributes `ssn`, `name`, `address`, `phone`, `insurance_id` and `pcp`.\n    '''\n\n    return get_session('hospital').query(Patient).all()\n\n\ndef fetch_all_stays() -> List[Stay]:\n    '''Fetches all the stays from the database and returns a list of Stay objects.\n\n    Args:\n        None\n\n    Returns:\n        List[Stay]: A list of Stay objects. A Stay object has attributes `stay_id`, `patient`, `room`, `stay_start` and `stay_end`.\n    '''\n\n    return get_session('hospital').query(Stay).all()",
    "coding_task": "Write a function which will find the name of the patient who has stayed in the hospital for the longest time. Return this name and the number of days they stayed in the hospital as a list of two elements. The first element should be the name of the patient and the second element should be the number of days they stayed in the hospital. Return this as a JSON string.",
    "imports": "import json\nfrom database.test_utility_functions import fetch_all_patients, fetch_all_stays",
    "function_name": "def get_patient_with_longest_stay():",
    "pre_test_code": "patient_with_longest_stay = json.loads(get_patient_with_longest_stay())",
    "test_cases": ["assert type(patient_with_longest_stay) == list", "assert patient_with_longest_stay[0] == 'Random J. Patient'", "assert patient_with_longest_stay[1] == 11"]
  },
  {
    "id": 25,
    "utility_function_details": "def fetch_all_patients() -> List[Patient]:\n    '''Fetches all the patients from the database and returns a list of Patient objects.\n\n    Args:\n        None\n\n    Returns:\n        List[Patient]: A list of Patient objects. A Patient object has attributes `ssn`, `name`, `address`, `phone`, `insurance_id` and `pcp`.\n    '''\n\n    return get_session('hospital').query(Patient).all()\n\n\ndef fetch_all_procedures() -> List[Procedures]:\n    '''Fetches all the procedures from the database and returns a list of Procedures objects.\n\n    Args:\n        None\n\n    Returns:\n        List[Procedures]: A list of Procedures objects. A Procedures object has attributes `code`, `name` and `cost`.\n    '''\n\n    return get_session('hospital').query(Procedures).all()\n\n\ndef fetch_all_undergoes() -> List[Undergoes]:\n    '''Fetches all the undergoes from the database and returns a list of Undergoes objects.\n\n    Args:\n        None\n\n    Returns:\n        List[Undergoes]: A list of Undergoes objects. An Undergoes object has attributes `patient`, `procedures`, `stay`, `date_undergoes`, `physician` and `assisting_nurse`.\n    '''\n\n    return get_session('hospital').query(Undergoes).all()",
    "coding_task": "Write a function which will take in an argument `ssn`. Now find the total cost of all the procedures undergone by the patient with that ssn. Return this total cost as an integer.",
    "imports": "import json\nfrom database.test_utility_functions import fetch_all_patients, fetch_all_procedures, fetch_all_undergoes",
    "function_name": "def get_total_cost_of_procedures_for_patient(ssn):",
    "test_cases": ["assert get_total_cost_of_procedures_for_patient(100000001) == 9375.0", "assert get_total_cost_of_procedures_for_patient(100000004) == 16399.0"]
  }
]
